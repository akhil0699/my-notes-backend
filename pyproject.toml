[tool.poetry]
name = "notes-service"
version = "0.1.0"
description = ""
authors = ["Pradeep Fageria <pradeep@smartpbc.net>"]
readme = "README.md"
packages = [{include = "notes_service"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "0.115.3"
uvicorn = "^0.23.2"
python-dotenv = "^1.0.0"
aiofiles = "^23.2.1"
gunicorn = "22.0.0"
pydantic = "^2.5.2"
pydantic-settings = "^2.1.0"
sqlalchemy = "^2.0.43"
pymysql = "^1.1.1"
python-multipart = "^0.0.20"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
pythonpath = [
    "notes_service"
]
filterwarnings = [
    'ignore::DeprecationWarning'
]

[tool.coverage.run]
branch = true

omit = [
    "__init__.py",
    "main.py",
    "schemas.py",
    "logging.py",
    "settings.py",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

ignore_errors = true
